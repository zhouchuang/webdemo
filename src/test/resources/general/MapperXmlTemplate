<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="${packageName}.dao.${className}Dao" >

<!-- 查询字段 -->
<sql id="columnList" >
	${abbrTableName}.${pkId},
	@columnList{ ${abbrTableName}.@{columnName},}@
</sql>


<!--通过id集合in查询-->
<sql id="inClause">
    <if test="column!=null">
        <if test="ids==null">
            and 1=0
        </if>
        <if test="ids!=null">
            <if test="ids.size>0">
                and  ${abbrTableName}.${column} in
                <foreach item="items" index="index" collection="ids" open="(" separator="," close=")">
                    #{items}
                </foreach>
            </if>
            <if test="ids.size==0">
                and 1=0
            </if>
        </if>
    </if>
</sql>

<!-- 查询条件 -->
<sql id="whereClause">
where 1=1
<trim  suffixOverrides="," >
	<if test="condition.id != null" >
	    and ${abbrTableName}.${pkId} = #{condition.id}
	</if>
	@whereClause{<if test="condition.@{name} != null" >and  ${abbrTableName}.@{columnName} = #{condition.@{name}}</if>}@
</trim>
<include refid="inClause"/>
</sql>

<!-- 模糊查询条件 -->
<sql id="whereLikeClause">
where 1=1
<trim  suffixOverrides="," >
	<if test="condition.id != null" >
	    and ${abbrTableName}.${pkId} = #{condition.id}
	</if>													 		
	@whereClause{<if test="condition.@{name} != null" >and  UPPER(${abbrTableName}.@{columnName}) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.@{name}}),'%'))</if>}@
</trim>
<include refid="inClause"/>
</sql>





<!-- 插入记录 -->
<insert id="add"  >
  insert into ${tableName} (${pkId},@insert{@{columnName},}@)
  values(#{id,jdbcType=VARCHAR},@insert{#{@{name}},}@)
</insert>



<!-- 修改记录，只修改只不为空的字段 -->
<update id="update" >
	update ${tableName} set
	<trim  suffixOverrides="," >
	@update{<if test="@{name} != null ">@{columnName}=#{@{name}},</if>}@
	</trim> where ${pkId}=#{id} and version = #{version}-1
</update>

<!-- 删除记录 -->
<delete id="del" >
	delete from ${tableName} where ${pkId} = #{id}
</delete>

<!-- 根据id查询  -->
<select id="get"   resultType="${className}"  parameterType="String">
	select <include refid="columnList" /> 
	from ${tableName}  ${abbrTableName}
	where  ${abbrTableName}.${pkId} = #{id}  and ${abbrTableName}.isDeleted = false
</select>

<!-- 列表总数-->
<select id="count" resultType="java.lang.Long" >
	select count(1) 
	from ${tableName}  ${abbrTableName}
	<include refid="whereClause"/>
</select>

<!-- 查询page -->
<select id="findPage" resultType="${className}" >
	select 
	<include refid="columnList"/>
	from ${tableName} ${abbrTableName}
	<include refid="whereClause"/>
	<if test="orderByClause!=null">${orderByClause}</if>
</select>

<!-- 模糊查询page -->
<select id="findLikePage" resultType="${className}" >
	select 
	<include refid="columnList"/>
	from ${tableName} ${abbrTableName}
	<include refid="whereLikeClause"/>
	<if test="orderByClause!=null">${orderByClause}</if>
</select>

<!-- 查询列表list -->
<select id="findList" resultType="${className}" >
	select
	<include refid="columnList"/>
	from ${tableName} ${abbrTableName}
	<include refid="whereClause"/>
	<if test="orderByClause!=null">${orderByClause}</if>
</select>

<!--模糊查询list-->
<select id="findLikeList" resultType="${className}" >
	select
	<include refid="columnList"/>
	from ${tableName} ${abbrTableName}
	<include refid="whereLikeClause"/>
	<if test="orderByClause!=null">${orderByClause}</if>
</select>

<!-- 查询符合条件的数据的id集合 -->
<select id="findIds" resultType="String">
	select ${abbrTableName}.${idsColumn}
	from ${tableName} ${abbrTableName}
    <include refid="whereClause"/>
    <if test="orderByClause!=null">${orderByClause}</if>
</select>

<!-- 查询符合模糊条件的数据的id集合 -->
<select id="findLikeIds" resultType="String">
	select ${abbrTableName}.${idsColumn}
	from ${tableName} ${abbrTableName}
    <include refid="whereLikeClause"/>
    <if test="orderByClause!=null">${orderByClause}</if>
</select>

<!-- 获取一个对象通过非id -->
<select id="one" resultType="${className}" >
     select
    <include refid="columnList"/>
     from ${tableName} ${abbrTableName}
    <include refid="whereClause"/>
    <if test="orderByClause!=null">${orderByClause}</if>
    limit 0,1
</select>

<!--如果你想返回一个HashMap 就实现这个select标签-->
<select id="queryHashMap" resultType="java.util.HashMap"  parameterType="Object">
</select>
</mapper>